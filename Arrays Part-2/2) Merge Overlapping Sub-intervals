2) Merge Overlapping Sub-intervals (LeetCode Problem: 56)

Problem Statement: Given an array of intervals, merge all the overlapping intervals and return an array of non-overlapping intervals.

Approach 1:

Select an interval and check if other intervals can be merged in it. If it is merged, 
use an if statement to make sure that the merged intervals and ignored in the successive 
iterations.

TC: O(N*logN) + O(2*N)
SC: O(N)

vector<vector<int>> mergeOverlappingIntervals(vector<vector<int>> &arr) {
    int n = arr.size();
    sort(arr.begin(), arr.end());
    vector<vector<int>> ans;

    for (int i = 0; i < n; i++) { // select an interval:
        int start = arr[i][0];
        int end = arr[i][1];

        //Skip all the merged intervals:
        if (!ans.empty() && end <= ans.back()[1]) {
            continue;
        }

        //check the rest of the intervals:
        for (int j = i + 1; j < n; j++) {
            if (arr[j][0] <= end) {
                end = max(end, arr[j][1]);
            }
            else {
                break;
            }
        }
        ans.push_back({start, end});
    }
    return ans;
}

Approach 2:

Dynamically update the start and the end variables. Judge if the interval can be 
extended. If yes, update the end variable. If no, push the last interval {start,end}
and select new start and end values for the next iteration. Finally, push the last 
stored {start,end} pair and return the result.

TC: O(N*logN) + O(N)
SC: O(N)

class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        int n=intervals.size();
        vector<vector<int>> res;
        sort(intervals.begin(),intervals.end());
        int start=intervals[0][0],end=intervals[0][1];
        for (int i=1;i<n;i++) {
            if (intervals[i][0]<=end) end=max(end,intervals[i][1]);
            //the end of the incoming interval can be lower than the 
            //previous end or can be higher than the previous end
            else {
                res.push_back({start,end});
                start=intervals[i][0];
                end=intervals[i][1];
            }
        }
        res.push_back({start,end});
        return res;
    }
};