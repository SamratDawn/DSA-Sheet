5) Sort an array of 0s, 1s and 2s (LeetCode Problem: 75)

Problem Statement: Given an array consisting of only 0s, 1s, and 2s.
Write a program to in-place sort the array without using inbuilt sort functions.

Approach 1:

Use any sorting algorithm to sort the array.

TC: O(N*logN)
SC: O(1)
[For language based in-built sorting algorithms.]

Approach 2:

Have 3 variables, a,b and c to store the counts of 0,1 and 2 and then 
re-write the entire array.

void sortArray(vector<int>& arr, int n) {
    int cnt0 = 0, cnt1 = 0, cnt2 = 0;
    for (int i = 0; i < n; i++) {
        if (arr[i] == 0) cnt0++;
        else if (arr[i] == 1) cnt1++;
        else cnt2++;
    }
    for (int i = 0; i < cnt0; i++) arr[i] = 0;
    for (int i = cnt0; i < cnt0 + cnt1; i++) arr[i] = 1;
    for (int i = cnt0 + cnt1; i < n; i++) arr[i] = 2;

}

TC: O(N) + O(N)
SC: O(1)

Approach 3:

This problem is a variation of the popular Dutch National flag algorithm. 
The algorithm has 3 parts-
arr[0….low-1] contains 0. [Extreme left part]
arr[low….mid-1] contains 1.
arr[high+1….n-1] contains 2. [Extreme right part], n = size of the array

Note- when we swap mid and high it is not known what type of value high had earlier (0,1 or 2) so we just
decrement the high pointer and we do not increment the mid pointer.

If high had 0 or 2, we have to stick to the same index for mid.
If high had 1, mid will automatically get incremented in the next iteration.

No such dilemma exists for low as the region of low is already been traversed by mid
confirming that the LHS subarray consists of 0s and 1s only, where the region of 0s is marked by low.

TC: O(N)
SC: O(1)

class Solution {
public:
    void sortColors(vector<int>& nums) {
        int n=nums.size();
        int low=0,mid=0,high=n-1;
        while (mid<=high) {
            if (nums[mid]==2) {
                swap(nums[mid],nums[high]);
                high--;
            }
            else if (nums[mid]==0) {
                swap(nums[mid],nums[low]);
                mid++;
                low++;
            }
            else mid++;;
        }
    }
};
